import fs from 'fs'
import path from 'path'
import express from 'express'
import prod from './handler/prod'
import LRU from 'lru-cache'
import setup from './handler/setup'
import routes from './routes/index'
import render from './handler/render'
import createRenderer from './handler/createBundler'
import raven from './raven'

const resolve = file => path.resolve(__dirname, file)
const redirects = require('../router/301.json')

// MANAGE PRODUCTION STUFF
const isProd = process.env.NODE_ENV === 'production',
  useMicroCache = process.env.MICRO_CACHE !== 'false',
  app = express()

// SETUP RENDERER AND READYPROMISE
let renderer, readyPromise;
if (isProd) {
  // In production: create server renderer using built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('../public/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('../public/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('../build/setup-dev-server')(app, (bundle, options) => {
    renderer = createRenderer(bundle, options)
  })
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})

// SETUP SHIT UP
setup(app, serve);

// 301 redirect for changed routes
Object.keys(redirects).forEach(k => {
  app.get(k, (req, res) => res.redirect(301, redirects[k]))
})

// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
const microCache = LRU({
  max: 100,
  maxAge: 1000
})

// route management
app.use('/', routes)

// SPA Router.
app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res, microCache, renderer))
})

module.exports = app;
